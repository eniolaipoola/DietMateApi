<?phpnamespace app\models;use Yii;use yii\db\ActiveRecord;use yii\web\IdentityInterface;class User extends ActiveRecord implements IdentityInterface{     const SCENARIO_DIETITIAN = 'dietitian';     const SCENARIO_USER = 'user';    public static function tableName()    {        return 'users';    }    public function rules()    {        return [            [['firstname', 'height', 'weight'], 'required', 'on' => self::SCENARIO_USER],            [['firstname', 'lastname', 'email', 'password', 'sex', 'bmi', 'height', 'weight', 'created_at',                'updated_at','role_id'], 'safe', 'on' => self::SCENARIO_USER],            [['password'], 'string', 'max' => 200],            ['email', 'unique'],            [['role_id'], 'default', 'value' => 1],            [['created_at'], 'default','value'=> date('Y-m-d H:i:s')],            [['updated_at'], 'default', 'value' => '0000-00-00 00:00:00'],            [['email','password'], 'required', 'on' => self::SCENARIO_DIETITIAN],            [['firstname', 'lastname', 'email', 'password', 'sex', 'created_at', 'updated_at', 'role_id'], 'safe', 'on' => self::SCENARIO_DIETITIAN],        ];    }    public function getRole()    {        return $this->hasOne(Role::className(), ['role_id' => 'id']);    }    public function getUserBMI()    {        return $this->hasOne(Bmi::className(), ['user_id' => 'id']);    }    public function getUserIBW()    {        return $this->hasOne(IdealWeight::className(), ['user_id' => 'id']);    }    public function calcBmi($height, $weight){        if($weight > 100){            Yii::$app->response->ok("Are you sure this is your weight?", $weight);        }        if($height < 100) {            Yii::$app->response->ok("Are you sure this is your height?", $height);        }        $heightMetre = ($height * $height) / 10000;        $bmi = $weight / $heightMetre;        $result = round($bmi, 2);        return $result;    }    /**     * Generates password hash before saved     * @param bool $password     * @return bool     */    public function generateHash($password)    {        if (parent::beforeSave($password)) {            if ($this->isNewRecord) {                $this->password = Yii::$app->security->generatePasswordHash($password);            }            return true;        }        return false;    }    public function scenarios()    {        $scenarios = parent::scenarios();        $scenarios[self::SCENARIO_DIETITIAN];        $scenarios[self::SCENARIO_USER];        return $scenarios;    }    /**     * Log users in     * @param $password     * @return bool     */    public function login($password)    {        if ($this->validatePassword($password)) {            return Yii::$app->user->login($this->getPrimaryKey());        }        return false;    }    /**     * Sets password     * @param $password     * @return string     */    public function setPassword($password)    {        return $this->password = Yii::$app->getSecurity()->generatePasswordHash($password);    }    /**     * @return string     */    public function getPassword()    {        return '';    }    /**     * Validates password     * @param $password     * @return bool|string     */    public function validatePassword($password)    {        $data = Yii::$app->security->validatePassword($password, $this->password);        if ($data !== false) {            return $data;        } else {            return "Invalid password entered";        }    }    /** Implementation from identity interface     *     *     */    public function setAccessToken($token)    {        return $this->token = Yii::$app->security->generateRandomString($token) . '_' . time();    }    public function getAccessToken()    {        return " ";    }    public static function findIdentityByAccessToken($token, $type = null)    {        return static::findOne(['access-token' => 'token']);    }    public static function findIdentity($id)    {        return static::findOne(['id' => $id]);    }    public function validateAccessToken($token)    {        if (empty($token)) {            return false;        } else {            $timestamp = (int)substr($token, strrpos($token, '_') + 1);            $expire = Yii::$app->params['staff.token'];            return $timestamp + $expire >= time();        }    }    public function getId()    {        return $this->getPrimaryKey();    }    public function getAuthKey()    {        return $this->auth_key;    }    public function validateAuthKey($authKey)    {        return $this->getAuthKey() === $authKey;    }}